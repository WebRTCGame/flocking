(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { "default": obj }; };

var foo = require("./fun.js");
var test2 = require("./src/test2.js");
console.log(foo(5));
test2(10);

var math = _interopRequireWildcard(require("./src/test3.js"));

console.log("2Ï€ = " + math.sum(math.pi, math.pi));

console.log(math.empty("hello"));

var createCanvas = require("./src/test3").createCanvas;

var test = createCanvas();

},{"./fun.js":2,"./src/test2.js":5,"./src/test3":6,"./src/test3.js":6}],2:[function(require,module,exports){
"use strict";

module.exports = function (n) {
  return n * 1000;
};

},{}],3:[function(require,module,exports){
"use strict";

exports.Point = Point;

var Vector = require("./Gvector").Vector;

function Point(x, y) {
	this.x = x || 0;
	this.y = y || 0;
};

Point.prototype.toVector = function () {
	return new Vector(this.x, this.y);
};
Object.defineProperty(exports, "__esModule", {
	value: true
});

},{"./Gvector":4}],4:[function(require,module,exports){
"use strict";

/*jshint camelcase: true, browser:true, maxlen: 100, curly: true, eqeqeq: true, immed: true, latedef: true, noarg: true, noempty: true, nonew: true, quotmark: true, undef: true, unused: true, strict: true, maxdepth: 3, maxstatements:20, maxcomplexity: 5 */
/* global $:true, Vector:true, Fish:true, Food:true */

// helper library to work with vectors

exports.Vector = Vector;
function Vector(x, y) {
	this.x = x || 0;
	this.y = y || 0;
}

Vector.prototype = {
	set: function set(x, y) {
		this.x = x;
		this.y = y;

		return this;
	},

	add: function add(v) {
		this.x += v.x;
		this.y += v.y;

		return this;
	},

	sub: function sub(v) {
		this.x -= v.x;
		this.y -= v.y;

		return this;
	},
	subtract: function subtract(v) {
		return this.sub(v);
	},

	mul: function mul(s) {
		this.x *= s;
		this.y *= s;

		return this;
	},
	multiply: function multiply(s) {

		return this.mul(s);
	},
	div: function div(s) {
		!s && console.log("Division by zero!");

		this.x /= s;
		this.y /= s;

		return this;
	},
	divide: function divide(s) {
		return this.div(s);
	},
	mag: function mag() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	},
	magnitude: function magnitude() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	},
	length: function length() {
		return this.mag();
	},
	truncate: function truncate(value) {
		if (this.length() > value) {
			this.normalize();
			this.multiply(value);
		}
		return this;
	},
	normalize: function normalize() {
		"use strict";
		var mag = this.magnitude();
		mag && this.div(mag);
		return this;
	},
	unit: function unit() {
		"use strict";
		var mag = this.mag();
		return new Vector(this.x / mag, this.y / mag);
	},
	angle: function angle() {
		return Math.atan2(this.y, this.x);
	},
	setMag: function setMag(m) {
		"use strict";
		var angle = this.angle();
		this.x = m * Math.cos(angle);
		this.y = m * Math.sin(angle);
		return this;
	},
	setAngle: function setAngle(a) {
		"use strict";
		var mag = this.mag();
		this.x = mag * Math.cos(a);
		this.y = mag * Math.sin(a);
		return this;
	},
	rotate: function rotate(a) {
		this.setAngle(this.angle() + a);
		return this;
	},
	limit: function limit(l) {
		"use strict";
		var mag = this.mag();
		if (mag > l) {
			this.setMag(l);
		}
		return this;
	},
	angleBetween: function angleBetween(v) {
		return this.angle() - v.angle();
	},
	dot: function dot(v) {
		return this.x * v.x + this.y * v.y;
	},
	lerp: function lerp(v, amt) {
		this.x += (v.x - this.x) * amt;
		this.y += (v.y - this.y) * amt;
		return this;
	},
	dist: function dist(v) {
		"use strict";
		var dx = this.x - v.x;
		var dy = this.y - v.y;
		return Math.sqrt(dx * dx + dy * dy);
	},
	near: function near(v, length) {
		return this.dist(v) < length;
	},
	copy: function copy() {
		return new Vector(this.x, this.y);
	},
	clone: function clone() {
		return this.copy();
	},
	toString: function toString() {
		return "x: " + this.x & " | y: " + this.y;
	},
	toArray: function toArray() {
		return [this.x, this.y];
	},
	mix: function mix(v, amount) {
		if (typeof amount === "undefined") {
			amount = 0.5;
		}
		this.x = (1 - amount) * this.x + amount * v.x;
		this.y = (1 - amount) * this.y + amount * v.y;
		return this;
	},
	zero: function zero() {
		this.x = this.y = 0;
	},
	cross: function cross(v) {
		return this.x * v.y - this.y * v.x;
	},
	projectOnto: function projectOnto(vec2) {
		"use strict";
		var coeff = (this.x * vec2.x + this.y * vec2.y) / (vec2.x * vec2.x + vec2.y * vec2.y);
		this.x = coeff * vec2.x;
		this.y = coeff * vec2.y;
		return this;
	},
	horizontalAngle: function horizontalAngle() {
		return Math.atan2(this.y, this.x);
	},
	verticalAngle: function verticalAngle() {
		return Math.atan2(this.x, this.y);
	},
	lengthSq: function lengthSq() {
		return this.x * this.x + this.y * this.y;
	},
	isEqualTo: function isEqualTo(v) {
		return this.x === v.x && this.y === v.y;
	},
	toObject: function toObject() {
		return {
			x: this.x,
			y: this.y
		};
	},
	perpRight: function perpRight() {
		return new Vector(-this.y, this.x);
	},
	clamp: function clamp(vMin, vMax) {
		if (this.x < vMin.x) {
			this.x = vMin.x;
		} else if (this.x > vMax.x) {
			this.x = vMax.x;
		}
		if (this.y < vMin.y) {
			this.y = vMin.y;
		} else if (this.y > vMax.y) {
			this.y = vMax.y;
		}
		return this;
	},
	clampScalar: function clampScalar(min, max) {
		if (this.x < min) {
			this.x = min;
		} else if (this.x > max) {
			this.x = max;
		}
		if (this.y < min) {
			this.y = min;
		} else if (this.y > max) {
			this.y = max;
		}
		return this;
	},
	ceil: function ceil() {
		this.x = Math.ceil(this.x);
		this.y = Math.ceil(this.y);
		return this;
	},
	floor: function floor() {
		this.x = Math.floor(this.x);
		this.y = Math.floor(this.y);
		return this;
	},
	negate: function negate() {
		this.x = -this.x;
		this.y = -this.y;
		return this;
	}
};
Object.defineProperty(exports, "__esModule", {
	value: true
});

},{}],5:[function(require,module,exports){
"use strict";

module.exports = function (n) {
    console.log("what");
    return n * 1000;
};

},{}],6:[function(require,module,exports){
"use strict";

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { "default": obj }; };

exports.sum = sum;
exports.createCanvas = createCanvas;
function sum(x, y) {
    return x + y;
}
var pi = exports.pi = 3.141593;

var empty = function (x) {
    console.log(x);
    return x + " there!";
};

exports.empty = empty;

var testThis = require("./test4").testThis;

var Vector = require("./Gvector").Vector;

var V = _interopRequireWildcard(require("./Gvector.js"));

console.log(JSON.stringify(V));
console.log(JSON.stringify(V.prototype));
var Vec = new Vector(5, 1);
console.log(Vec.x);

var Point = require("./Gpoint").Point;

var P1 = new Point(10, 20);
console.log(P1.x);

function createCanvas() {
    document.addEventListener("DOMContentLoaded", function (event) {
        console.log("DOM fully loaded and parsed");
        testThis();
        console.log(JSON.stringify(Vector));
        console.log(JSON.stringify(Vector.prototype));
        var canv = document.createElement("canvas");
        canv.id = "someId";

        document.body.appendChild(canv);
        return canv;
    });
};
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{"./Gpoint":3,"./Gvector":4,"./Gvector.js":4,"./test4":7}],7:[function(require,module,exports){
"use strict";

exports.testThis = testThis;
function testThis() {
  console.log("outside test");
};
Object.defineProperty(exports, "__esModule", {
  value: true
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
